import { Strategy as BaseStrategy } from 'passport-strategy';
import { Request } from 'express';
import { VerifyFunc, VerifyFuncWithReq, StrategyOptions, StrategyOptionsWithReq } from './types';
export declare class Strategy extends BaseStrategy {
    readonly name = "magic";
    private readonly verify;
    private readonly verifyWithReq;
    private readonly passReqToCallback;
    private readonly attachmentAttribute;
    private readonly magicInstance;
    /**
     * Creates an instance of `MagicStrategy`.
     *
     * This authentication strategy validates requests based on an authorization
     * header containing a Decentralized ID Token (DIDT).
     *
     * Applications must supply a `verify` callback which accepts a `MagicUser`
     * object with the following information:
     *
     *   1. `claim`: The validated and parsed DIDT claim.
     *   2. `id`: The user's Decentralized Identfier. This should be used as the
     *      ID column in your user tables.
     *   3. `publicAddress`: The public address of the signing user. DIDTs are
     *      generated using Elliptic Curve public/private key pairs.
     *
     * The `verify` callback also supplies a `done` callback, which should be
     * called with the user's resolved profile information or set to `false` if
     * the credentials are not valid (i.e.: due to a replay attack).
     *
     * If an exception occurred, `err` should be set.
     *
     * An `options` object can be passed to the constructor to customize behavior of the `verify` callback:
     *
     * Options:
     *   - `magicInstance`: A custom Magic SDK instance to use.
     *   - `passReqToCallback`: When `true`, `req` is the first argument to the verify callback (default: `false`).
     *
     * **NOTE: Parameters can be provided in any order!**
     *
     * @param options - Options to customize the functionality of `verify`.
     * @param verify - A callback to validate the authentication request.
     *
     * @see https://docs.magic.link/tutorials/decentralized-id
     * @see https://w3c-ccg.github.io/did-primer/
     *
     * @example
     *     passport.use(new MagicStrategy(
     *       ({ id }, done) => {
     *         try {
     *           const user = await User.findOne(id);
     *           done(null, user);
     *         } catch (err) {
     *           done(err);
     *         }
     *       }
     *     ));
     */
    constructor(options: StrategyOptions, verify: VerifyFunc);
    constructor(options: StrategyOptionsWithReq, verify: VerifyFuncWithReq);
    constructor(verify: VerifyFunc, options: StrategyOptions);
    constructor(verify: VerifyFuncWithReq, options: StrategyOptionsWithReq);
    constructor(verify: VerifyFunc);
    /**
     * Authenticate request based on the authorization header.
     *
     * @param req - A request object from Express.
     */
    authenticate(req: Request): Promise<void>;
}
