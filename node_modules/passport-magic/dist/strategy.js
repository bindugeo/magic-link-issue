"use strict";
/*
  eslint-disable

  no-template-curly-in-string,
  no-multi-assign,
  prefer-rest-params
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var passport_strategy_1 = require("passport-strategy");
var admin_1 = require("@magic-sdk/admin");
var Strategy = /** @class */ (function (_super) {
    __extends(Strategy, _super);
    /* eslint-enable prettier/prettier */
    function Strategy(arg0, arg1) {
        var _a;
        var _this = _super.call(this) || this;
        _this.name = 'magic';
        // Extract options from arguments -- parameters can be provided in any order.
        var args = Array.from(arguments);
        var verify = args.find(function (arg) { return typeof arg === 'function'; });
        var options = args.find(function (arg) { return typeof arg !== 'function'; });
        if (!verify)
            throw new TypeError('`MagicStrategy` requires a `verify` callback.');
        _this.verify = _this.verifyWithReq = verify;
        _this.passReqToCallback = !!(options === null || options === void 0 ? void 0 : options.passReqToCallback);
        _this.attachmentAttribute = (_a = options === null || options === void 0 ? void 0 : options.attachmentAttribute) !== null && _a !== void 0 ? _a : 'attachment';
        _this.magicInstance = (options === null || options === void 0 ? void 0 : options.magicInstance) || new admin_1.Magic();
        return _this;
    }
    /**
     * Authenticate request based on the authorization header.
     *
     * @param req - A request object from Express.
     */
    Strategy.prototype.authenticate = function (req) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var hasAuthorizationHeader, isFormattedCorrectly, didToken, attachment, user, done;
            var _this = this;
            return __generator(this, function (_c) {
                hasAuthorizationHeader = !!req.headers.authorization;
                isFormattedCorrectly = (_a = req.headers.authorization) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith('bearer ');
                if (!hasAuthorizationHeader)
                    return [2 /*return*/, this.fail({ message: 'Missing authorization header.' }, 400)];
                if (!isFormattedCorrectly) {
                    return [2 /*return*/, this.fail({ message: 'Malformed authorization header. Please use the `Bearer ${token}` format.' }, 400)];
                }
                didToken = req.headers.authorization.substring(7);
                attachment = (_b = req[this.attachmentAttribute]) !== null && _b !== void 0 ? _b : 'none';
                try {
                    this.magicInstance.token.validate(didToken, attachment);
                    user = {
                        issuer: this.magicInstance.token.getIssuer(didToken),
                        publicAddress: this.magicInstance.token.getPublicAddress(didToken),
                        claim: this.magicInstance.token.decode(didToken)[1],
                    };
                    done = function (_err, _user, _info) {
                        if (_err)
                            return _this.error(_err);
                        if (!_user)
                            return _this.fail(_info);
                        _this.success(_user, _info);
                    };
                    try {
                        if (this.passReqToCallback)
                            this.verifyWithReq(req, user, done);
                        else
                            this.verify(user, done);
                    }
                    catch (err) {
                        return [2 /*return*/, this.error(err)];
                    }
                }
                catch (err) {
                    if (err instanceof admin_1.SDKError)
                        return [2 /*return*/, this.fail({ message: err.message, error_code: err.code }, 401)];
                    return [2 /*return*/, this.fail({ message: 'Invalid DID token.' }, 401)];
                }
                return [2 /*return*/];
            });
        });
    };
    return Strategy;
}(passport_strategy_1.Strategy));
exports.Strategy = Strategy;
//# sourceMappingURL=strategy.js.map